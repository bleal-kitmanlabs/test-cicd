version: 2

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          context: build-deploy

jobs:
  build:
    docker:
      - image: 834914689975.dkr.ecr.eu-west-1.amazonaws.com/builder:latest
        aws_auth:
          aws_access_key_id: $KITMAN_IMAGES_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $KITMAN_IMAGES_AWS_SECRET_KEY

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Install tfenv and tgenv
          command: |
            git clone --depth=1 https://github.com/tfutils/tfenv.git $HOME/.tfenv
            git clone https://github.com/cunymatthieu/tgenv.git $HOME/.tgenv

      - run:
          name: Terragrunt Plan - Forcing Path
          command: |
            install_tg_version() {
              VERSION="v$1"
              mkdir -p $HOME/.tgenv/versions/$VERSION
              curl -LO https://github.com/gruntwork-io/terragrunt/releases/download/$VERSION/terragrunt_linux_amd64
              mv terragrunt_linux_amd64 $HOME/.tgenv/versions/$VERSION/terragrunt
              chmod +x $HOME/.tgenv/versions/$VERSION/terragrunt
            }

            PATH="$HOME/.tfenv/bin:$HOME/.tgenv/bin:$PATH"
            cd global/organizations/sandbox/eu-west-1/null-resource
            TG_VERSION=$(cat .terragrunt-version)
            install_tg_version $TG_VERSION
            tgenv use v$TG_VERSION
            terragrunt plan -out="$(pwd)/plan.out" | sed "s/\x1B\[[0-9;]*[mGKF]//g" | tee plan.txt

      - run:
          name: Post Stats to GitHub PR
          command: |
            cd global/organizations/sandbox/eu-west-1/null-resource

            pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
            -u $GH_USER:$GH_TOKEN)

            if [ $(echo $pr_response | jq length) -eq 0 ]; then
              echo "No PR found to update"
            else
              pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
            fi

            PLAN_TXT=$(awk '{printf "%s\\n", $0}' plan.txt )

            # DATA_RAW="<details><br \\><summary>Terragrunt Plan </summary><br \\><br \\> \`\`\` $PLAN_TXT \`\`\` <br><br></details>"

            DATA_RAW="Este é um comentário de várias linhas usando Markdown.\n\n- Lista item 1\n- Lista item 2\n\n**Texto em negrito**\n\n\`\`\`sh\n# Exemplo de código\n$PLAN_TXT\`\`\`"

            curl --request POST "$pr_comment_url" \
              --location \
              -u $GH_USER:$GH_TOKEN \
              --header 'Content-Type: application/json' \
              --data-raw '{
                "body": $DATA_RAW
              }'
            # --data-raw "$( printf '{"body": %s}' "$(echo $DATA_RAW | jq -sR .)" )"
